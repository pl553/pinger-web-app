// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getContainerStatusByIp = `-- name: GetContainerStatusByIp :one
SELECT container_ip, ping_time_ms, last_successful_ping, status
FROM containers
WHERE container_ip = $1
`

func (q *Queries) GetContainerStatusByIp(ctx context.Context, containerIp string) (Container, error) {
	row := q.db.QueryRow(ctx, getContainerStatusByIp, containerIp)
	var i Container
	err := row.Scan(
		&i.ContainerIp,
		&i.PingTimeMs,
		&i.LastSuccessfulPing,
		&i.Status,
	)
	return i, err
}

const listContainerStatuses = `-- name: ListContainerStatuses :many
SELECT container_ip, ping_time_ms, last_successful_ping, status
FROM containers
ORDER BY last_successful_ping DESC
`

func (q *Queries) ListContainerStatuses(ctx context.Context) ([]Container, error) {
	rows, err := q.db.Query(ctx, listContainerStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Container
	for rows.Next() {
		var i Container
		if err := rows.Scan(
			&i.ContainerIp,
			&i.PingTimeMs,
			&i.LastSuccessfulPing,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertContainerStatus = `-- name: UpsertContainerStatus :exec
INSERT INTO containers (container_ip, ping_time_ms, last_successful_ping, status)
VALUES ($1, $2, $3, $4)
ON CONFLICT (container_ip)
DO UPDATE SET
  ping_time_ms = EXCLUDED.ping_time_ms,
  last_successful_ping = EXCLUDED.last_successful_ping,
  status = EXCLUDED.status
`

type UpsertContainerStatusParams struct {
	ContainerIp        string
	PingTimeMs         int32
	LastSuccessfulPing pgtype.Timestamptz
	Status             ContainerStatus
}

func (q *Queries) UpsertContainerStatus(ctx context.Context, arg UpsertContainerStatusParams) error {
	_, err := q.db.Exec(ctx, upsertContainerStatus,
		arg.ContainerIp,
		arg.PingTimeMs,
		arg.LastSuccessfulPing,
		arg.Status,
	)
	return err
}
